import json

from telegram import InlineQueryResultArticle, InputTextMessageContent, Update
from telegram.ext import (
    Application,
    CallbackContext,
    CallbackQueryHandler,
    ChosenInlineResultHandler,
    ContextTypes,
    InlineQueryHandler,
)

import bot.handlers.construct as construct
import bot.handlers.handler as handler
import bot.logs.lazy_logger as logger
from bot.db.database import get_user_favorites
from bot.fetch.models import SearchItem
from bot.fetch.schedule import get_schedule
from bot.fetch.search import search_schedule
from bot.handlers import states as st
from bot.handlers.states import EInlineStep


async def handle_inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∑–∞–ø—Ä–æ—Å–æ–≤
    –°–æ–∑–¥–∞–µ—Ç Inline –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    """

    if context.bot_data["maintenance_mode"]:
        return

    if len(update.inline_query.query) > 2:
        logger.lazy_logger.logger.info(
            json.dumps(
                {
                    "type": "query",
                    "queryId": update.inline_query.id,
                    "query": update.inline_query.query.lower(),
                    **update.inline_query.from_user.to_dict(),
                },
                ensure_ascii=False,
            )
        )

    inline_query = update.inline_query
    query = inline_query.query.lower()

    await handle_query(update, context, query)


async def handle_query(update: Update, context: CallbackContext, query: str):
    inline_results = []
    schedule_items = []
    description = ""
    favorite = get_user_favorites(update, context)

    if favorite:
        description = "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        schedule_items: list[SearchItem] = await search_schedule(favorite)

    if len(query) > 2:
        description = "–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        inline_results = []
        schedule_items: list[SearchItem] = await search_schedule(query)

    for item in schedule_items:
        inline_results.append(
            InlineQueryResultArticle(
                id=f"{item.type}:{item.uid}",
                title=item.name,
                description=description,
                input_message_content=InputTextMessageContent(
                    message_text=f"‚ÑπÔ∏è –í—ã–±—Ä–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {item.name}!\n"
                    + "üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:"
                ),
                reply_markup=construct.construct_weeks_markup(),
            )
        )

    context.user_data["inline_available_items"] = schedule_items
    return await update.inline_query.answer(
        inline_results, cache_time=1, is_personal=True
    )


async def answer_inline_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í —Å–ª—É—á–∞–µ –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è ChosenInlineHandler –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    –∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥ Inline –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ ask_day
    """
    if update.chosen_inline_result is not None:
        type, uid = update.chosen_inline_result.result_id.split(":")
        schedule_items: list[SearchItem] = context.user_data["inline_available_items"]

        selected_item = None
        for item in schedule_items:
            if item.type == type and item.uid == int(uid):
                selected_item: SearchItem = item
                break

        context.user_data["item"] = selected_item

        context.user_data["inline_step"] = EInlineStep.ask_week
        context.user_data[
            "inline_message_id"
        ] = update.chosen_inline_result.inline_message_id
        context.user_data["message_id"] = update.chosen_inline_result.inline_message_id

    return


async def inline_dispatcher(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –≤ —á–∞—Ç–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ Callback –≤—ã–∑–æ–≤–∞
    """
    if "inline_step" not in context.user_data:
        await deny_inline_usage(update)
        return

    # –ï—Å–ª–∏ Id —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ—Ç–æ—Ä–æ–º –º—ã –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–º, —á—Ç–æ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ
    # –º–µ–Ω—é, —Ç–æ –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ

    if (
        update.callback_query.inline_message_id
        and update.callback_query.inline_message_id
        != context.user_data["inline_message_id"]
    ):
        await deny_inline_usage(update)
        return

    status = context.user_data["inline_step"]
    if status == EInlineStep.completed or status == EInlineStep.ask_item:
        await deny_inline_usage(update)
        return

    context.user_data["schedule"] = await get_schedule(context.user_data["item"])

    if status == EInlineStep.ask_week:  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏
        context.user_data["available_items"] = None

        target = await handler.got_week_handler(
            update, context
        )  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏
        # –ó–∞—Ç–µ–º –∫–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–¥–µ–ª—é, –º—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –¥–Ω—è
        if target == st.GETDAY:
            context.user_data["inline_step"] = EInlineStep.ask_day

    if status == EInlineStep.ask_day:  # –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–Ω—è, —Å—Ç–∞—Ç—É—Å –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ ask_day
        target = await handler.got_day_handler(update, context)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è

        if (
            target == st.GETWEEK
        ):  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥ –Ω–∞ –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏, —Ç–æ –º—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏
            context.user_data["inline_step"] = EInlineStep.ask_week

    return


async def deny_inline_usage(update: Update):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ—é—â–∏–π—Å—è Inline –≤—ã–∑–æ–≤
    """
    await update.callback_query.answer(
        text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é, —Ç.–∫. –æ–Ω–æ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É",
        show_alert=True,
    )
    return


def init_handlers(application: Application):
    application.add_handler(InlineQueryHandler(handle_inline_query, block=False))
    application.add_handler(
        ChosenInlineResultHandler(answer_inline_handler, block=False)
    )
    application.add_handler(CallbackQueryHandler(inline_dispatcher, block=False))
