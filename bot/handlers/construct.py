from telegram import InlineKeyboardMarkup, InlineKeyboardButton
import bot.ImportantDays as ImportantDays
import datetime as datetime

import bot.formats.decode as decode

from bot.schedule.week import get_current_week_number


def construct_teacher_workdays(week: int, schedule: list, room=None, group=None, day=None):
    """
    –°–æ–∑–¥–∞–µ—Ç Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏, –∫–æ–≥–¥–∞ —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–∞—Ä—ã.
    –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–∞—Ä—ã, —Ç–æ –∫–æ–ª–±—ç–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞–≤–µ–Ω –¥–Ω—é –Ω–µ–¥–µ–ª–∏
    –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç, —Ç–æ –∫–æ–ª–±—ç–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞–≤–µ–Ω 'chill'
    @param week: –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
    @param schedule: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ JSON
    @param room: –ù–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    @param group: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    @param day: –ù–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    @return: InlineKeyboard —Å–æ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    """
    if room:
        founded_days = list(
            {lesson['weekday'] for lesson in schedule if
             lesson['room']['name'] == room and week in lesson['weeks']}
        )

    elif group:
        founded_days = list(
            {lesson['weekday'] for lesson in schedule['lessons'] if
             week in lesson['weeks']}
        )

    else:
        founded_days = list(
            {lesson['weekday'] for teacher in schedule for lesson in teacher['lessons']
             if week in lesson['weeks']}
        )

    no_work_indicator = "üèñÔ∏è"
    weekdays = {
        1: "–ü–ù",
        2: "–í–¢",
        3: "–°–†",
        4: "–ß–¢",
        5: "–ü–¢",
        6: "–°–ë",
    }

    button_rows = []
    row = []

    for i in range(1, 7):
        sign = ""
        sign1 = ""
        callback = i

        if i not in founded_days:
            sign = "‚õî"
            callback = "chill"

        if day and i == day:
            sign = "‚óñ"
            sign1 = "‚óó"

        row.append(
            InlineKeyboardButton(
                text=f"{sign}{weekdays[i]}{sign1 if sign1 else sign}",
                callback_data=callback
            ))

        if len(row) == 3 or i == 6:
            button_rows.append(tuple(row))
            row = []

    if founded_days:
        button_rows.append((InlineKeyboardButton(text="–ù–∞ –Ω–µ–¥–µ–ª—é", callback_data="week"),))

    button_rows.append((InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"),))
    ready_markup = InlineKeyboardMarkup(button_rows)

    return ready_markup


def construct_teacher_markup(teachers):
    """
    –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ—Ñ–∞–º–∏–ª—å—Ü–µ–≤
    :param teachers: –ª–∏—Å—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    """
    rawNames = teachers
    decoded_names = decode.decode_teachers(rawNames)

    btns = []

    for rawName, decoded_name in zip(rawNames, decoded_names):
        btns = btns + \
               [[InlineKeyboardButton(decoded_name, callback_data=rawName)]]
    btns = btns + [[(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))]]
    TEACHER_CLARIFY_MARKUP = InlineKeyboardMarkup(btns)

    return TEACHER_CLARIFY_MARKUP


def construct_rooms_markup(rooms):
    """
    –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π
    :param rooms: –ª–∏—Å—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–π
    """
    btns = []

    for room in rooms:
        room_number, room_data = room.split(':')
        btns = btns + \
               [[InlineKeyboardButton(room_number, callback_data=room_data)]]
    btns = btns + [[(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))]]
    ROOM_CLARIFY_MARKUP = InlineKeyboardMarkup(btns)

    return ROOM_CLARIFY_MARKUP


def construct_back_markup():
    """
    –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–∑–∞–¥
    """
    btns = [[(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))]]
    BACK_MARKUP = InlineKeyboardMarkup(btns)

    return BACK_MARKUP


def construct_weeks_markup():
    """
    –°–æ–∑–¥–∞–µ—Ç KeyboardMarkup —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–µ–¥–µ–ª—å, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏
    –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –ø–∞–º—è—Ç–Ω–æ–π –¥–∞—Ç–µ+-–∏–Ω—Ç–µ—Ä–≤–∞–ª
    """
    current_week = get_current_week_number()
    week_indicator = "‚óñ"
    week_indicator1 = "‚óó"
    today = datetime.date.today()

    for day in ImportantDays.important_days:
        if abs((day[ImportantDays.DATE] -
                today).days) <= day[ImportantDays.INTERVAL]:
            week_indicator = day[ImportantDays.SIGN]
            week_indicator1 = day[ImportantDays.SIGN]

    week_buttons = []
    row_buttons = []

    for i in range(1, 18):
        button_text = f"{week_indicator}{i}{week_indicator1}" if i == current_week else str(i)
        row_buttons.append(InlineKeyboardButton(
            text=button_text,
            callback_data=i
        ))

        if len(row_buttons) == 4 or i == 17:
            week_buttons.append(tuple(row_buttons))
            row_buttons = []

    date_buttons = [
        [
            InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today"),
            InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="tomorrow"),
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
        ]
    ]

    reply_mark = InlineKeyboardMarkup(week_buttons + date_buttons)

    return reply_mark
